pipeline {
//None parameter in the agent section means that no global agent will be allocated for the entire Pipeline’s
//execution and that each stage directive must specify its own agent section.
    agent any
    parameters {
        string defaultValue: '300', name: 'INTERVAL'
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    }
    stages {
        stage('Init') {
            steps {
                //cleanWs()
                echo "Init stage"
                echo "Running BUILD_ID: ${env.BUILD_ID} on ${env.JENKINS_URL}"
                echo "INTERVAL in sec: ${params.INTERVAL}"
            } 
    }
        stage('Get SCM') {
            steps {
                git branch: 'development', url: 'https://github.com/VirtualL/workshop_ci_cd.git'
            }
        }      
        stage('Build') {
            steps {
                sh "docker build -t boto3_ip_finder ."
            }
        }
        stage('Deploy') {
            steps {
                sh "docker rm -f boto3_ip_finder"
                sh "docker run -itd --name boto3_ip_finder --env INTERVAL=${params.INTERVAL}  --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}  --env AWS_DEFAULT_REGION=eu-west-1 boto3_ip_finder"
                sleep 15
                sh "docker logs boto3_ip_finder"
                
            }
        }     
        // stage('Test') {
        //     agent {
        //         docker {
        //             //This image parameter downloads the qnib:pytest Docker image and runs this image as a
        //             //separate container. The pytest container becomes the agent that Jenkins uses to run the Test
        //             //stage of your Pipeline project.
        //             image 'qnib/pytest'
        //         }
        //     }
        //     steps {
        //         //This sh step executes pytest’s py.test command on sources/test_calc.py, which runs a set of
        //         //unit tests (defined in test_calc.py) on the "calc" library’s add2 function.
        //         //The --junit-xml test-reports/results.xml option makes py.test generate a JUnit XML report,
        //         //which is saved to test-reports/results.xml
        //         sh 'py.test --verbose --junit-xml test-reports/results.xml sources/ '
        //     }
        //     post {
        //         always {
        //             //This junit step archives the JUnit XML report (generated by the py.test command above) and
        //             //exposes the results through the Jenkins interface.
        //             //The post section’s always condition that contains this junit step ensures that the step is
        //             //always executed at the completion of the Test stage, regardless of the stage’s outcome.
        //             junit 'test-reports/results.xml'
        //         }
        //     }
        // }
    }


}